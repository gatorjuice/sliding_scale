{"version":3,"sources":["calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","povertyLevels","householdMembers","householdIncome","medicadeFee","handleHouseholdIncomeChange","bind","assertThisInitialized","handleHouseholdMembersChange","calculatePovertyLevel","findLowestTier","event","target","value","setState","povertyLevel","console","log","_this2","highestTiers","forEach","amount","index","push","length","scale","percentOfServiceCost","hourlyServiceCharge","react_default","a","createElement","className","name","type","onChange","number_format_default","handleInputChange","Component","App","calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAqIeA,cAjIb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,cAAe,CAAC,OAChBC,iBAAkB,EAClBC,gBAAiB,EACjBC,YAAa,OAGfX,EAAKY,4BAA8BZ,EAAKY,4BAA4BC,KAAjCZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACnCA,EAAKe,6BAA+Bf,EAAKe,6BAA6BF,KAAlCZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACpCA,EAAKgB,sBAAwBhB,EAAKgB,sBAAsBH,KAA3BZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAC7BA,EAAKiB,eAAiBjB,EAAKiB,eAAeJ,KAApBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAZLA,4FAeUkB,GAC3B,IAAMT,EAAmBS,EAAMC,OAAOC,MAEtCjB,KAAKkB,SAAS,CAACZ,qBAEfN,KAAKa,sBAAsBP,iDAGPA,GACpB,IAAMa,EAAe,MAAkC,MAAxBb,EAAmB,GAElDN,KAAKkB,SAAS,CACZb,cAAe,CACbc,EACe,KAAfA,EACe,IAAfA,EACe,KAAfA,EACe,EAAfA,EACe,IAAfA,yDAKsBJ,GAC1BK,QAAQC,IAAIN,EAAMC,OAAOC,OACzBjB,KAAKkB,SAAS,CAACX,gBAAiBQ,EAAMC,OAAOC,iDAG9B,IAAAK,EAAAtB,KACTK,EAAgBL,KAAKI,MAAMC,cAE7BkB,EAAe,GASnB,OARAH,QAAQC,IAAIrB,KAAKI,MAAMG,iBACvBF,EAAcmB,QAAQ,SAACC,EAAQC,GACzBJ,EAAKlB,MAAMG,gBAAkBkB,IAC/BF,EAAaI,KAAKD,GAClBN,QAAQC,IAAIE,MAGhBH,QAAQC,IAAIE,EAAaA,EAAaK,OAAS,IACxCL,EAAaA,EAAaK,OAAS,IAAM,mCAIhD,IAAMpB,EAAcR,KAAKI,MAAMI,YACzBqB,EAAQ,CACZ,CACEC,qBAAsB,EACtBC,oBAAqB,GAEvB,CACED,qBAAsB,GACtBC,oBAAqB,GAAMvB,GAE7B,CACEsB,qBAAsB,GACtBC,oBAAqB,GAAMvB,GAE7B,CACEsB,qBAAsB,GACtBC,oBAAqB,GAAMvB,GAE7B,CACEsB,qBAAsB,GACtBC,oBAAqB,GAAMvB,GAE7B,CACEsB,qBAAsB,IACtBC,oBAAqBvB,IAIzB,OACEwB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,kCAEEF,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACVC,KAAK,mBACLC,KAAK,SACLpB,MAAOjB,KAAKI,MAAME,iBAClBgC,SAAUtC,KAAKY,gCAGnBoB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,iCAEEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEE,UAAU,eACVlB,MAAOjB,KAAKI,MAAMG,gBAClB+B,SAAUtC,KAAKS,+BAGnBuB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6BAEEF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEE,UAAU,eACVlB,MAAOjB,KAAKI,MAAMI,YAClB8B,SAAUtC,KAAKwC,qBAGnBR,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,UAAKL,EAAM7B,KAAKc,kBAAkBgB,sBAClCE,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,UAAKL,EAAM7B,KAAKc,kBAAkBiB,6BA5HjBU,aCcVC,0LAXX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAACS,EAAD,eANQF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.59b5a9ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport NumberFormat from 'react-number-format';\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      povertyLevels: [12140],\n      householdMembers: 1,\n      householdIncome: 0.00,\n      medicadeFee: 92.99\n    };\n\n    this.handleHouseholdIncomeChange = this.handleHouseholdIncomeChange.bind(this);\n    this.handleHouseholdMembersChange = this.handleHouseholdMembersChange.bind(this);\n    this.calculatePovertyLevel = this.calculatePovertyLevel.bind(this);\n    this.findLowestTier = this.findLowestTier.bind(this);\n  }\n\n  handleHouseholdMembersChange(event) {\n    const householdMembers = event.target.value;\n\n    this.setState({householdMembers});\n\n    this.calculatePovertyLevel(householdMembers);\n  }\n\n  calculatePovertyLevel(householdMembers) {\n    const povertyLevel = 12140 + ((householdMembers - 1) * 4320);\n\n    this.setState({\n      povertyLevels: [\n        povertyLevel,\n        povertyLevel * 1.25,\n        povertyLevel * 1.5,\n        povertyLevel * 1.75,\n        povertyLevel * 2,\n        povertyLevel * 2.5\n      ]\n    });\n  }\n\n  handleHouseholdIncomeChange(event){\n    console.log(event.target.value)\n    this.setState({householdIncome: event.target.value});\n  }\n\n  findLowestTier() {\n    const povertyLevels = this.state.povertyLevels;\n\n    let highestTiers = [];\n    console.log(this.state.householdIncome)\n    povertyLevels.forEach((amount, index) => {\n      if (this.state.householdIncome > amount) {\n        highestTiers.push(index);\n        console.log(highestTiers);\n      }\n    })\n    console.log(highestTiers[highestTiers.length - 1])\n    return highestTiers[highestTiers.length - 1] || 0;\n  }\n\n  render() {\n    const medicadeFee = this.state.medicadeFee;\n    const scale = [\n      {\n        percentOfServiceCost: 0,\n        hourlyServiceCharge: 5\n      },\n      {\n        percentOfServiceCost: 20,\n        hourlyServiceCharge: 0.2 * medicadeFee\n      },\n      {\n        percentOfServiceCost: 40,\n        hourlyServiceCharge: 0.4 * medicadeFee\n      },\n      {\n        percentOfServiceCost: 60,\n        hourlyServiceCharge: 0.6 * medicadeFee\n      },\n      {\n        percentOfServiceCost: 80,\n        hourlyServiceCharge: 0.8 * medicadeFee\n      },\n      {\n        percentOfServiceCost: 100,\n        hourlyServiceCharge: medicadeFee\n      }\n    ];\n\n    return(\n      <div>\n        <form>\n          <label>\n            Household Members:\n            <input\n              className='form-control'\n              name='householdMembers'\n              type='number'\n              value={this.state.householdMembers}\n              onChange={this.handleHouseholdMembersChange}\n            />\n          </label>\n          <br></br>\n          <label>\n            Household Income:\n            <NumberFormat\n              className='form-control'\n              value={this.state.householdIncome}\n              onChange={this.handleHouseholdIncomeChange}\n            />\n          </label>\n          <br></br>\n          <label>\n            Medicade Fee:\n            <NumberFormat\n              className='form-control'\n              value={this.state.medicadeFee}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br></br>\n        </form>\n        <p>% of Total Service Cost:</p>\n        <h3>{scale[this.findLowestTier()].percentOfServiceCost}</h3>\n        <p>Hourly Service Charge:</p>\n        <h3>{scale[this.findLowestTier()].hourlyServiceCharge}</h3>\n      </div>\n    )\n  }\n}\n\nexport default Calculator;\n","import React, { Component } from 'react';\nimport Calculator from './calculator';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>Sliding Scale Calculator</h2>\n          <Calculator />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}