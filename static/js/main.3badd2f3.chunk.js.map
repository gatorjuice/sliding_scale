{"version":3,"sources":["helpers/scale.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["scale","medicadeFee","percentOfServiceCost","hourlyServiceCharge","Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","householdMembers","householdIncome","medicaidFee","handleChangeEvent","bind","assertThisInitialized","calculatePovertyLevels","lowestPovertyLevelIndex","event","name","target","value","setState","defineProperty","povertyLevel","_this2","povertyLevels","highestTiers","forEach","amount","index","push","length","lowestTier","react_default","a","createElement","className","type","onChange","id","toFixed","React","Component","App","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3badd2f3.chunk.js","sourcesContent":["function scale (medicadeFee) {\n  return [\n    {\n      percentOfServiceCost: 0,\n      hourlyServiceCharge: 5\n    },\n    {\n      percentOfServiceCost: 20,\n      hourlyServiceCharge: 0.2 * medicadeFee\n    },\n    {\n      percentOfServiceCost: 40,\n      hourlyServiceCharge: 0.4 * medicadeFee\n    },\n    {\n      percentOfServiceCost: 60,\n      hourlyServiceCharge: 0.6 * medicadeFee\n    },\n    {\n      percentOfServiceCost: 80,\n      hourlyServiceCharge: 0.8 * medicadeFee\n    },\n    {\n      percentOfServiceCost: 100,\n      hourlyServiceCharge: medicadeFee\n    }\n  ]\n}\n\nexport default scale\n","import React from 'react'\nimport scale from '../helpers/scale'\n\nclass Calculator extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      householdMembers: 1,\n      householdIncome: 0.0,\n      medicaidFee: 94.4\n    }\n\n    this.handleChangeEvent = this.handleChangeEvent.bind(this)\n    this.calculatePovertyLevels = this.calculatePovertyLevels.bind(this)\n    this.lowestPovertyLevelIndex = this.lowestPovertyLevelIndex.bind(this)\n  }\n\n  handleChangeEvent (event) {\n    const name = event.target.name\n    const value = event.target.value\n\n    this.setState({ [name]: value })\n  }\n\n  calculatePovertyLevels (householdMembers) {\n    const povertyLevel = 12140 + ((householdMembers - 1) * 4320)\n\n    return [\n      povertyLevel,\n      povertyLevel * 1.25,\n      povertyLevel * 1.5,\n      povertyLevel * 1.75,\n      povertyLevel * 2,\n      povertyLevel * 2.5\n    ]\n  }\n\n  lowestPovertyLevelIndex () {\n    const povertyLevels = this.calculatePovertyLevels(this.state.householdMembers)\n\n    const highestTiers = []\n\n    povertyLevels.forEach((amount, index) => {\n      if (this.state.householdIncome >= amount) {\n        highestTiers.push(index)\n      }\n    })\n\n    return highestTiers[highestTiers.length - 1] || 0\n  }\n\n  render () {\n    const medicaidFee = this.state.medicaidFee\n    const lowestTier = scale(medicaidFee)[this.lowestPovertyLevelIndex()]\n\n    return (\n      <div>\n        <form>\n          <label>\n            Household Members:\n            <input\n              className='form-control'\n              name='householdMembers'\n              type='number'\n              value={this.state.householdMembers}\n              onChange={this.handleChangeEvent}\n            />\n          </label>\n          <br></br>\n          <label>\n            Household Income:\n            <input\n              className='form-control'\n              name='householdIncome'\n              type='number'\n              value={this.state.householdIncome}\n              onChange={this.handleChangeEvent}\n            />\n          </label>\n          <br></br>\n          <label>\n            Medicaid Fee:\n            <br></br>\n            QMHP: $94.40 | MHP: $68.72\n            <input\n              className='form-control'\n              name='medicaidFee'\n              type='number'\n              value={this.state.medicaidFee}\n              onChange={this.handleChangeEvent}\n            />\n          </label>\n          <br></br>\n        </form>\n        <p>Total Service Cost:</p>\n        <h3 id='service-cost'>{lowestTier.percentOfServiceCost}%</h3>\n        <p>Hourly Service Charge:</p>\n        <h3 id='hourly-charge'>${lowestTier.hourlyServiceCharge.toFixed(2)}</h3>\n      </div>\n    )\n  }\n}\n\nexport default Calculator\n","import React, { Component } from 'react';\nimport Calculator from './components/Calculator';\nimport './assets/css/app.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>Sliding Scale Calculator</h2>\n          <Calculator />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}